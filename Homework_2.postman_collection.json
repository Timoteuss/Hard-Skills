{
	"info": {
		"_postman_id": "18c7561f-ded2-4f76-b8f6-f72b08e90d25",
		"name": "Homework_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test (\"Статус код 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"// Проверить, что в body приходит правильный string.\r",
							"var responseBody = pm.response.text();\r",
							"\r",
							"pm.test(\"В body приходит правильный string\", () => {\r",
							"    pm.expect(responseBody).to.be.a('string');\r",
							"})\r",
							"pm.test(\"В body приходит правильный string\", () => {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\")\r",
							"});\r",
							"\r",
							"console.log(typeof responseBody)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test (\"Статус код 200\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"var responseJson = pm.response.json ();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"name в ответе равно name s request\", () => {\r",
							"    pm.expect(responseJson.name).to.eql(\"Timofey\");\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"age в ответе равно age s request\", () => {\r",
							"    pm.expect(responseJson.age).to.eql(\"27\");\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"salary в ответе равно salary s request\", () => {\r",
							"    pm.expect(responseJson.salary).to.eql(70000);\r",
							"});\r",
							"\r",
							"//Спарсить request\r",
							"var reqData = request.data;\r",
							"console.log(reqData);\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name в ответе равно name s request\", function () {\r",
							"    pm.expect(responseJson.name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"age в ответе равно age s request\", () => {\r",
							"    pm.expect(responseJson.age).to.eql(reqData.age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let salaryInt = +reqData.salary;\r",
							"\r",
							"pm.test(\"salary в ответе равно salary s request\", () => {\r",
							"        pm.expect(responseJson.salary).to.eql(salaryInt);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response\r",
							"console.log(responseJson.family);\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"u_salary_1_5_year в ответе равно salary*4\", () => {\r",
							"    let sal = responseJson.family.u_salary_1_5_year;\r",
							"    pm.expect(sal).eql(salaryInt * 4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Timofey",
							"type": "text"
						},
						{
							"key": "age",
							"value": "27",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "70000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Статус код 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"//Спарсить response body в json\r",
							"var respJson = pm.response.json();\r",
							"console.log(respJson);\r",
							"\r",
							"//Спарсить request\r",
							"var reqData = pm.request.url.query.toObject();\r",
							"console.log(reqData);\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name в ответе равно name s request\", () => {\r",
							"    pm.expect(respJson.name).eql(reqData.name)\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"age в ответе равно age s request\", () => {\r",
							"    pm.expect(respJson.age).eql(reqData.age)\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"salary в ответе равно salary s request\", () => {\r",
							"    pm.expect(respJson.salary).eql(+reqData.salary)\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log(respJson.family);\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name\r",
							"var dog = respJson.family.pets.dog;\r",
							"pm.test(\"у параметра dog есть параметры name\", function () {\r",
							"    pm.expect(dog).to.include.key('name')\r",
							"});\r",
							"/*Ещё можно так:\r",
							"pm.test(\"у параметра dog есть параметры name\", () => {\r",
							"    pm.expect(dog.name).to.be.have\r",
							"});*/\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"у параметра dog есть параметры age\", () => {\r",
							"    pm.expect(dog).to.have.include.key('age')\r",
							"});\r",
							"\r",
							"//Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"параметр name имеет значение Luky\", () => {\r",
							"    pm.expect(dog.name).eql(\"Luky\")\r",
							"});\r",
							"\r",
							"//Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"параметр age имеет значение 4\", () => {\r",
							"    pm.expect(dog.age).eql(4)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Timofey&age=27&salary=70000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Timofey"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "70000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Статус код 200\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"var respJson = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"var reqData = pm.request.url.query.toObject();\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name в ответе равно name s request\", () => {\r",
							"    pm.expect(respJson.name).eql(reqData.name)\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"age в ответе равно age из request\", () => {\r",
							"    pm.expect(respJson.age).eql(+reqData.age)\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр salary из request.\r",
							"console.log(reqData.salary);\r",
							"// Вывести в консоль параметр salary из response.\r",
							"console.log(respJson.salary);\r",
							"// Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(respJson.salary[0]);\r",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(respJson.salary[1]);\r",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(respJson.salary[2]);\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"var intReqSalary = +reqData.salary;\r",
							"pm.test(\"0-й элемент параметра salary равен salary из request\", () => {\r",
							"    pm.expect(respJson.salary[0]).eql(intReqSalary)\r",
							"});\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"1-й элемент параметра salary равен salary*2 из request\", () => {\r",
							"    pm.expect(+respJson.salary[1]).eql(intReqSalary*2)\r",
							"});\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"2-й элемент параметра salary равен salary*3 из request\", () => {\r",
							"    pm.expect(+respJson.salary[2]).eql(intReqSalary*3)\r",
							"});\r",
							"// Создать в окружении переменную name\r",
							"// Создать в окружении переменную age\r",
							"// Создать в окружении переменную salary\r",
							"// Передать в окружение переменную name\r",
							"var name = \"Timofey\";\r",
							"pm.environment.set(\"name\", name);\r",
							"// Передать в окружение переменную age\r",
							"var age = 27\r",
							"pm.environment.set(\"age\", age );\r",
							"// Передать в окружение переменную salary\r",
							"var salary = 70000\r",
							"pm.environment.set(\"salary\", salary);\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"var sal = respJson.salary;\r",
							"for (var i = 0; i <= 2; i++) {\r",
							"    console.log(\"Элемент списка из параметра salary: \" + sal[i])\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Timofey&age=27&salary=70000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Timofey"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "70000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Статус код 200\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"// Спарсить response body в json. \r",
							"var resp = pm.response.json (); \r",
							"// Спарсить request.\r",
							"var req = request.data;\r",
							"// Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"json response имеет параметр start_qa_salary\", () => {\r",
							"    pm.expect(resp).to.have.include.key(\"start_qa_salary\")\r",
							"});\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"json response имеет параметр qa_salary_after_6_months\", () => {\r",
							"    pm.expect(resp).to.have.include.key(\"qa_salary_after_6_months\")\r",
							"});\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"json response имеет параметр qa_salary_after_12_months\", () => {\r",
							"    pm.expect(resp).to.have.include.key(\"qa_salary_after_12_months\")\r",
							"});\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"json response имеет параметр qa_salary_after_1.5_year\", () => {\r",
							"    pm.expect(resp).to.have.include.key(\"qa_salary_after_1.5_year\")\r",
							"});\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"json response имеет параметр qa_salary_after_3.5_years\", () => {\r",
							"    pm.expect(resp).to.have.include.key(\"qa_salary_after_3.5_years\")\r",
							"});\r",
							"// Проверить, что json response имеет параметр person\r",
							"pm.test(\"json response имеет параметр person\", () => {\r",
							"    pm.expect(resp).to.have.include.key(\"person\")\r",
							"});\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"параметр start_qa_salary равен salary из request\", () => {\r",
							"    pm.expect(resp.start_qa_salary).eql(+req.salary)\r",
							"});\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"параметр qa_salary_after_6_months равен salary*2 из request\", () => {\r",
							"    pm.expect(resp.qa_salary_after_6_months).eql(req.salary * 2)\r",
							"});\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"параметр qa_salary_after_12_months равен salary*2.7 из request\", () => {\r",
							"    pm.expect(resp.qa_salary_after_12_months).eql(req.salary * 2.7)\r",
							"});\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"параметр qa_salary_after_1.5_year равен salary*3.3 из request\", () => {\r",
							"    pm.expect(resp[\"qa_salary_after_1.5_year\"]).eql(req.salary * 3.3)\r",
							"});\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"параметр qa_salary_after_3.5_years\", () => {\r",
							"    pm.expect(resp[\"qa_salary_after_3.5_years\"]).eql(req.salary * 3.8)\r",
							"});\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"var respName = resp.person.u_name\r",
							"pm.test(\"в параметре person, 1-й элемент из u_name равен salary из request\", () => {\r",
							"    pm.expect(respName[1]).eql(+req.salary)\r",
							"});\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"var respAge = resp.person.u_age\r",
							"pm.test(\"параметр u_age равен age из request\", () => {\r",
							"    pm.expect(respAge).eql(+req.age)\r",
							"});\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"параметр u_salary_5_years равен salary*4.2 из request\", () => {\r",
							"    pm.expect(resp.person.u_salary_5_years).eql(req.salary * 4.2)\r",
							"});\r",
							"// ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"var pers = resp.person\r",
							"for (var i in pers) {\r",
							"    console.log(\"Параметр person: \" + i)\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}